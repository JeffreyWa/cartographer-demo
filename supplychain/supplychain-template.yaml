apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: source
spec:
  urlPath: .status.artifact.url
  revisionPath: .status.artifact.revision

  template:
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: $(workload.metadata.name)$
    spec:
      interval: 1m
      url: $(workload.spec.source.git.url)$
      ref: $(workload.spec.source.git.ref)$
      gitImplementation: libgit2
      ignore: ""
      secretRef:
        name: flux-ssh-cred
---
#
#
# `image` instantiates a `kpack/Image` object, responsible for ensuring that
# there's a container image built and pushed to a container image registry
# whenever there's either new source code, or its image builder gets na update.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: image
spec:
  params:
    - name: image_prefix
      default: harbor.haas-495.pez.vmware.com/apps/

  imagePath: .status.latestImage

  template:
    apiVersion: kpack.io/v1alpha1
    kind: Image
    metadata:
      name: $(workload.metadata.name)$
    spec:
      builder:
        kind: ClusterBuilder
        name: default
      tag: $(params.image_prefix)$$(workload.metadata.name)$
      source:
        blob:
          url: $(sources.source.url)$

---
#
#
# `app-deploy` instantiates a `kapp-ctrl/App` making use of an image that comes
# as input in the form of `$(images.image.image)$`.
#
# the use of `App` here is important because of how `knative` updates the
# knative service under the hood to include some extra annotations that _can't_
# be mutated once applied by knative's controller. As `kapp` is able to be
# configured to not patch certain features (something `cartographer` can't
# yet), we're able to bridge that gap with the use of `kapp-ctrl/App`.
#
#Iterative and incremental Implement
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: app-deploy
spec:
  template:
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: $(workload.metadata.name)$
    spec:
      serviceAccountName: default
      fetch:
        - inline:
            paths:
              manifest.yml: |
                ---
                apiVersion: kapp.k14s.io/v1alpha1
                kind: Config
                rebaseRules:
                  - path:
                      - metadata
                      - annotations
                      - serving.knative.dev/creator
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: &matchers
                      - apiVersionKindMatcher:
                          apiVersion: serving.knative.dev/v1
                          kind: Service
                  - path:
                      - metadata
                      - annotations
                      - serving.knative.dev/lastModifier
                    type: copy
                    sources: [new, existing]
                    resourceMatchers: *matchers
                ---
                apiVersion: serving.knative.dev/v1
                kind: Service
                metadata:
                  name: $(workload.metadata.name)$
                spec:
                  template:
                    metadata:
                      annotations:
                        autoscaling.knative.dev/minScale: "1"
                    spec:
                      containers:
                        - name: workload
                          image: $(images.image.image)$
                          securityContext:
                            runAsUser: 1000
                      imagePullSecrets:
                        - name: registry-credentials
      template:
        - ytt: {}
      deploy:
        - kapp: {}
